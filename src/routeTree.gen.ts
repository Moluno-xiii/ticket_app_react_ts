/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AboutRouteImport } from './routes/about'
import { Route as DashboardRouteRouteImport } from './routes/dashboard/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TicketsIndexRouteImport } from './routes/tickets/index'
import { Route as TicketsNewRouteImport } from './routes/tickets/new'
import { Route as TicketsTicketIdRouteImport } from './routes/tickets/$ticketId'
import { Route as DashboardSettingsRouteImport } from './routes/dashboard/settings'
import { Route as DashboardOverviewRouteImport } from './routes/dashboard/overview'
import { Route as AuthSignupRouteImport } from './routes/auth/signup'
import { Route as AuthLoginRouteImport } from './routes/auth/login'
import { Route as TicketsEditTicketidRouteImport } from './routes/tickets/edit/$ticketid'

const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRouteRoute = DashboardRouteRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TicketsIndexRoute = TicketsIndexRouteImport.update({
  id: '/tickets/',
  path: '/tickets/',
  getParentRoute: () => rootRouteImport,
} as any)
const TicketsNewRoute = TicketsNewRouteImport.update({
  id: '/tickets/new',
  path: '/tickets/new',
  getParentRoute: () => rootRouteImport,
} as any)
const TicketsTicketIdRoute = TicketsTicketIdRouteImport.update({
  id: '/tickets/$ticketId',
  path: '/tickets/$ticketId',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardSettingsRoute = DashboardSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardOverviewRoute = DashboardOverviewRouteImport.update({
  id: '/overview',
  path: '/overview',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const AuthSignupRoute = AuthSignupRouteImport.update({
  id: '/auth/signup',
  path: '/auth/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRouteImport,
} as any)
const TicketsEditTicketidRoute = TicketsEditTicketidRouteImport.update({
  id: '/tickets/edit/$ticketid',
  path: '/tickets/edit/$ticketid',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/signup': typeof AuthSignupRoute
  '/dashboard/overview': typeof DashboardOverviewRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/tickets/$ticketId': typeof TicketsTicketIdRoute
  '/tickets/new': typeof TicketsNewRoute
  '/tickets': typeof TicketsIndexRoute
  '/tickets/edit/$ticketid': typeof TicketsEditTicketidRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/signup': typeof AuthSignupRoute
  '/dashboard/overview': typeof DashboardOverviewRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/tickets/$ticketId': typeof TicketsTicketIdRoute
  '/tickets/new': typeof TicketsNewRoute
  '/tickets': typeof TicketsIndexRoute
  '/tickets/edit/$ticketid': typeof TicketsEditTicketidRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/signup': typeof AuthSignupRoute
  '/dashboard/overview': typeof DashboardOverviewRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/tickets/$ticketId': typeof TicketsTicketIdRoute
  '/tickets/new': typeof TicketsNewRoute
  '/tickets/': typeof TicketsIndexRoute
  '/tickets/edit/$ticketid': typeof TicketsEditTicketidRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/about'
    | '/auth/login'
    | '/auth/signup'
    | '/dashboard/overview'
    | '/dashboard/settings'
    | '/tickets/$ticketId'
    | '/tickets/new'
    | '/tickets'
    | '/tickets/edit/$ticketid'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/about'
    | '/auth/login'
    | '/auth/signup'
    | '/dashboard/overview'
    | '/dashboard/settings'
    | '/tickets/$ticketId'
    | '/tickets/new'
    | '/tickets'
    | '/tickets/edit/$ticketid'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/about'
    | '/auth/login'
    | '/auth/signup'
    | '/dashboard/overview'
    | '/dashboard/settings'
    | '/tickets/$ticketId'
    | '/tickets/new'
    | '/tickets/'
    | '/tickets/edit/$ticketid'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  AboutRoute: typeof AboutRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthSignupRoute: typeof AuthSignupRoute
  TicketsTicketIdRoute: typeof TicketsTicketIdRoute
  TicketsNewRoute: typeof TicketsNewRoute
  TicketsIndexRoute: typeof TicketsIndexRoute
  TicketsEditTicketidRoute: typeof TicketsEditTicketidRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tickets/': {
      id: '/tickets/'
      path: '/tickets'
      fullPath: '/tickets'
      preLoaderRoute: typeof TicketsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tickets/new': {
      id: '/tickets/new'
      path: '/tickets/new'
      fullPath: '/tickets/new'
      preLoaderRoute: typeof TicketsNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tickets/$ticketId': {
      id: '/tickets/$ticketId'
      path: '/tickets/$ticketId'
      fullPath: '/tickets/$ticketId'
      preLoaderRoute: typeof TicketsTicketIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/settings': {
      id: '/dashboard/settings'
      path: '/settings'
      fullPath: '/dashboard/settings'
      preLoaderRoute: typeof DashboardSettingsRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/overview': {
      id: '/dashboard/overview'
      path: '/overview'
      fullPath: '/dashboard/overview'
      preLoaderRoute: typeof DashboardOverviewRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/auth/signup': {
      id: '/auth/signup'
      path: '/auth/signup'
      fullPath: '/auth/signup'
      preLoaderRoute: typeof AuthSignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tickets/edit/$ticketid': {
      id: '/tickets/edit/$ticketid'
      path: '/tickets/edit/$ticketid'
      fullPath: '/tickets/edit/$ticketid'
      preLoaderRoute: typeof TicketsEditTicketidRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface DashboardRouteRouteChildren {
  DashboardOverviewRoute: typeof DashboardOverviewRoute
  DashboardSettingsRoute: typeof DashboardSettingsRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardOverviewRoute: DashboardOverviewRoute,
  DashboardSettingsRoute: DashboardSettingsRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  AboutRoute: AboutRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthSignupRoute: AuthSignupRoute,
  TicketsTicketIdRoute: TicketsTicketIdRoute,
  TicketsNewRoute: TicketsNewRoute,
  TicketsIndexRoute: TicketsIndexRoute,
  TicketsEditTicketidRoute: TicketsEditTicketidRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
